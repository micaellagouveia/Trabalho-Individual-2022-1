name: CI Backend

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PORT: 5432
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432 # exposing 5432 port for application to use
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout code # checking our the code at current commit that triggers the workflow
        uses: actions/checkout@v3

      - name: Cache dependency # caching dependency will make our build faster.
        uses: actions/cache@v2 # for more info checkout pip section documentation at https://github.com/actions/cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python 3.10 # setting python environment to 3.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.10' # if you want multiple python version run just use matrix strategy in job config. See the documentation of GitHub Actions

      - name: Check Python version # checking the python version to see if 3.x is installed.
        run: python --version
      
      - name: Install requirements # install application requirements
        run: pip install -r library_back/requirements.txt

      - name: An√°lise folha de estilo com pycodestyle
        run: |
          pip install pycodestyle
          pycodestyle --statistics library_back/.
      
      - name: Run Migrations # run migrations to create table in side car db container
        run: python library_back/manage.py migrate
        env:
          POSTGRES_HOST: localhost
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PORT: 5432
          POSTGRES_PASSWORD: password

      - name: Run Test with django manage.py test # running tests
        run: python library_back/manage.py test
        env:
          POSTGRES_HOST: localhost
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PORT: 5432
          POSTGRES_PASSWORD: password

      # - name: Python static code analysis with pylint
      #   run: |
      #     pip install pylint-django==2.5.3
      #     pwd
      #     cd library_back
      #     pwd
      #     pip freeze
      #     ls && pylint --load-plugins pylint_django --django-settings-module=src.settings --fail-under=5 *
